# Filename: schema-kitchen-sink.graphql

schema {
  query: QueryType
  mutation: MutationType
}

"""
Foo is quite the type.
"""
type Foo implements Bar {
  """
  one is a number.
  """
  one: Type

  "I am told that two is also a number"
  two(argument: InputType!): Type
  three(argument: InputType, other: String): Int
  four(argument: String = "string"): String
  five(argument: [String] = ["string", "string"]): String
  six(argument: InputType = {key: "value"}): Type
}

type AnnotatedObject @onObject(arg: "value") {
  annotatedField(arg: Type = "default" @onArg): Type @onField
}

interface Bar {
  one: Type
  four(argument: String = "string"): String
}

"""
AnnotatedInterface has stuff
"""
interface AnnotatedInterface @onInterface {
  annotatedField(arg: Type @onArg): Type @onField
}

"""
Feed includes all stuff and things.
"""
union Feed = Story | Article | Advert

"AnnotatedUnion i dont care"
union AnnotatedUnion @onUnion = A | B

scalar CustomScalar

scalar AnnotatedScalar @onScalar

enum Site {
  DESKTOP
  MOBILE
}

enum Locale {
  """
  Language I know
  """
  EN

  """
  Glorious nippon
  """
  JA

  """
  India
  """
  HI

  """
  Lanugage I don't know
  """
  LA @deprecated(reason: "dead language")
}

enum AnnotatedEnum @onEnum {
  ANNOTATED_VALUE @onEnumValue
  OTHER_VALUE
}

"""
InputType is neato
"""
input InputType {
  key: String!
  answer: Int = 42
  answr: Int = 42 @deprecated
}

input AnnotatedInput @onInputObjectType {
  annotatedField: Type @onField
}

extend type Foo {
  seven(argument: [String]): Type
}

extend type Foo @onType {}

type NoFields {}

directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @include(if: Boolean!)
  on FIELD
  | FRAGMENT_SPREAD
